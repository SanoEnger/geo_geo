from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional, List, Dict, Protocol, Any, Type, cast
import httpx 
import os
from PIL import Image
from PIL.ExifTags import TAGS
from contextlib import asynccontextmanager 

# ----------------------------------------------------\
# 1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (Python Protocol)
# ----------------------------------------------------\

class IBuildingGeolocator(Protocol):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–∏–π –æ–∂–∏–¥–∞–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è ML-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    def __init__(self, model_path: Optional[str]): ...
    def predict_coordinates(self, image: Image.Image, building_bbox: List[float]) -> Dict: ...

# ----------------------------------------------------\
# 2. –£—Å—Ç–æ–π—á–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç ML-–º–æ–¥—É–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏
# ----------------------------------------------------\

# –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
# –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø–∞–ø–∫–µ providers/
from providers.openstreetmap import OpenStreetMapProvider
from providers.geonames import GeoNamesProvider

ML_GEOLOCATOR_CLASS: Type[IBuildingGeolocator]

class StubBuildingGeolocator:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è ML-–≥–µ–æ–ª–æ–∫–∞—Ç–æ—Ä–∞."""
    def __init__(self, model_path: Optional[str]):
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏ ML_GEOLOCATOR_CLASS.")
    def predict_coordinates(self, image: Image.Image, building_bbox: List[float]) -> Dict:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        # –í–∞–∂–Ω–æ, —á—Ç–æ–±—ã –∑–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–ª–∞ BBOX, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ
        return {
            "coordinates": {"latitude": 55.7558, "longitude": 37.6173}, 
            "confidence": 0.5,
            "method": "ml_stub"
        }

ML_MODEL_PATH = os.getenv("ML_MODEL_PATH")
ML_GEOLOCATOR_AVAILABLE = False

try:
    # –ï—Å–ª–∏ ML-–º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–≥–æ –ø–æ–¥ –∞–ª–∏–∞—Å–æ–º RealBuildingGeolocator
    from providers.bulding_geolocation import BuildingGeolocator as RealBuildingGeolocator
    ML_GEOLOCATOR_CLASS = RealBuildingGeolocator
    if ML_MODEL_PATH:
        ML_GEOLOCATOR_AVAILABLE = True
        print(f"‚úÖ ML-–≥–µ–æ–ª–æ–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –ø—É—Ç–∏: {ML_MODEL_PATH}")
    else:
        ML_GEOLOCATOR_CLASS = StubBuildingGeolocator
        print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ML_MODEL_PATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ ML_GEOLOCATOR_CLASS.")
        
except ImportError as e:
    ML_GEOLOCATOR_CLASS = StubBuildingGeolocator
    print(f"‚ùå ML-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (Torch/Torchvision) –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ({e}). –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ ML_GEOLOCATOR_CLASS.")
except Exception as e:
    ML_GEOLOCATOR_CLASS = StubBuildingGeolocator
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML-–≥–µ–æ–ª–æ–∫–∞—Ç–æ—Ä–∞: {e}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞ ML_GEOLOCATOR_CLASS.")
finally:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏ –∏–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –æ–±—ä–µ–∫—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
    ml_geolocator = ML_GEOLOCATOR_CLASS(ML_MODEL_PATH)


# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú HTTPX –ö–õ–ò–ï–ù–¢–ê ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º lifespan –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ httpx.AsyncClient –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.
@asynccontextmanager
async def lifespan(app: FastAPI):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    app.state.http_client = httpx.AsyncClient()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
    app.state.osm_provider = OpenStreetMapProvider(client=app.state.http_client)
    app.state.geonames_provider = GeoNamesProvider(
        username=os.getenv("GEONAMES_USERNAME", "demo"),
        client=app.state.http_client
    )
    
    yield
    # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    await app.state.http_client.aclose()


app = FastAPI(
    title="Geocoding Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenStreetMap Nominatim, GeoNames –∏ ML-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π",
    version="1.0.0",
    lifespan=lifespan 
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—É—Ç—å –∫ –æ–±—â–µ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É)
UPLOAD_DIR_BASE = os.getenv("UPLOAD_DIR_BASE", "storage/uploaded_photos/raw") 


# --- –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• ---
class BuildingGeocodingRequest(BaseModel):
    file_id: str
    # üåü –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º Any, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å List[int], List[float] –∏–ª–∏ —á—Ç–æ-–ª–∏–±–æ –¥—Ä—É–≥–æ–µ
    building_bbox: Optional[List[Any]] = None
    
# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_exif_geolocation(image: Image.Image) -> Optional[Dict[str, float]]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ EXIF –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–£–ë–õ–ò–ß–ù–´–ô –ú–ï–¢–û–î getexif()
        exif_data = image.getexif() 
        if not exif_data:
            return None
        
        exif = {
            TAGS.get(k): v
            for k, v in exif_data.items()
        }
        
        gps_info = exif.get('GPSInfo')
        if gps_info:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è GPS –¥–∞–Ω–Ω—ã—Ö
            # –≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö EXIF –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if gps_info.get(1) == 'N' or gps_info.get(3) == 'E': 
                 return {"latitude": 55.7558, "longitude": 37.6173} 
            
        return None
    except Exception as e:
        print(f"Error reading EXIF: {e}") 
        return None

# --- –≠–ù–î–ü–û–ò–ù–¢–´ ---

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞."""
    ml_status = "available" if ML_GEOLOCATOR_AVAILABLE else "stub"
    return {"status": "healthy", "service": "geocoding", "ml_geolocator": ml_status}

@app.post("/api/reverse-geocode")
async def reverse_geocode_endpoint(lat: float = Query(...), lon: float = Query(...)):
    """–û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (OSM)."""
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    osm_provider = app.state.osm_provider
    geonames_provider = app.state.geonames_provider

    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        osm_result = await osm_provider.reverse(lat, lon) 
        address = osm_result.get("display_name", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç GeoNames
        timezone_info = await geonames_provider.get_timezone(lat, lon) 
        elevation = await geonames_provider.get_elevation(lat, lon) 
        
        return {
            "success": True,
            "result": {
                "address": address,
                "coordinates": {"latitude": lat, "longitude": lon},
                "meta": {
                    "timezone": timezone_info.get("timezoneId"),
                    "elevation": elevation
                }
            }
        }
    except httpx.HTTPError as e:
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º getattr() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç—É 'response'
        # –≠—Ç–æ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ Pylance –æ —Ç–æ–º, —á—Ç–æ –∞—Ç—Ä–∏–±—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.
        response = getattr(e, 'response', None)
        status_code = response.status_code if response is not None else 503
        raise HTTPException(status_code=status_code, detail=f"–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


@app.post("/api/geocode-building")
async def geocode_building(request: BuildingGeocodingRequest):
    """
    –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–∞–Ω–∏—è: —Å–Ω–∞—á–∞–ª–∞ ML, –ø–æ—Ç–æ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    osm_provider = app.state.osm_provider
    geonames_provider = app.state.geonames_provider

    image_path = os.path.join(UPLOAD_DIR_BASE, request.file_id)
    if not os.path.exists(image_path):
        raise HTTPException(status_code=404, detail=f"–§–∞–π–ª '{request.file_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.")
    
    try:
        image = Image.open(image_path)
        
        # üåü –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã–≤–æ–¥–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π BBOX
        print(f"üîÑ Geocoding: –ü–æ–ª—É—á–µ–Ω–Ω—ã–π BBOX: {request.building_bbox} (–¢–∏–ø: {type(request.building_bbox)})") 
        
        ml_lat: float
        ml_lng: float
        ml_confidence: float
        note: str
        method: str
        
        # üåü –£–°–ò–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç
        bbox_is_present = isinstance(request.building_bbox, list) and len(request.building_bbox) > 0
        exif_coords = get_exif_geolocation(image)

        # --- 1. –ü–†–ò–û–†–ò–¢–ï–¢ 1: BBOX –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–æ—Ç CV) ---
        if bbox_is_present:
            
            # üåü –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¢–ò–ü–ò–ó–ê–¶–ò–ò: –Ø–≤–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ List[float] –¥–ª—è ML-–º–æ–¥–µ–ª–∏
            # –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∏ –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –±—É–¥—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ float –≤ ML-–∫–æ–¥–µ
            valid_bbox: List[float] = cast(List[float], request.building_bbox) 
            
            # --- 1a. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ ML-–º–æ–¥—É–ª—è ---
            if ML_GEOLOCATOR_AVAILABLE:
                ml_prediction = ml_geolocator.predict_coordinates(image, valid_bbox)
                ml_lat = ml_prediction["coordinates"]["latitude"]
                ml_lng = ml_prediction["coordinates"]["longitude"]
                ml_confidence = ml_prediction["confidence"]
                
                note = "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é ML-–º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ BBOX."
                method = "ml_geolocation"
            
            # --- 1b. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ML-–∑–∞–≥–ª—É—à–∫–∏ (–µ—Å–ª–∏ BBOX –µ—Å—Ç—å, –Ω–æ ML –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω) ---
            else:
                ml_prediction = ml_geolocator.predict_coordinates(image, valid_bbox)
                ml_lat = ml_prediction["coordinates"]["latitude"]
                ml_lng = ml_prediction["coordinates"]["longitude"]
                ml_confidence = ml_prediction["confidence"]
                
                # üåü –ö–û–†–†–ï–ö–¢–ù–ê–Ø NOTE
                note = "BBOX –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ ML-–≥–µ–æ–ª–æ–∫–∞—Ç–æ—Ä–∞." 
                method = "ml_stub"
        
        # --- 2. –ü–†–ò–û–†–ò–¢–ï–¢ 2: BBOX –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–æ –µ—Å—Ç—å EXIF ---
        elif exif_coords:
            ml_lat = exif_coords["latitude"]
            ml_lng = exif_coords["longitude"]
            ml_confidence = 1.0 
            
            note = "BBOX –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ EXIF –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            method = "exif_geolocation"
            
        # --- 3. –ü–†–ò–û–†–ò–¢–ï–¢ 3: –ù–∏ BBOX, –Ω–∏ EXIF ---
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ML-–∑–∞–≥–ª—É—à–∫—É —Å –Ω—É–ª–µ–≤—ã–º BBOX, –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            stub_prediction = ml_geolocator.predict_coordinates(image, [0.0, 0.0, 0.0, 0.0]) 
            ml_lat = stub_prediction["coordinates"]["latitude"]
            ml_lng = stub_prediction["coordinates"]["longitude"]
            ml_confidence = stub_prediction["confidence"]
            
            note = "BBOX –∏ EXIF –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ ML-–≥–µ–æ–ª–æ–∫–∞—Ç–æ—Ä–∞."
            method = "ml_stub"
        
        # 4. –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: –ø—Ä—è–º—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        osm_result = await osm_provider.reverse(ml_lat, ml_lng) 
        address = osm_result.get("display_name", "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        timezone_info = await geonames_provider.get_timezone(ml_lat, ml_lng)
        elevation = await geonames_provider.get_elevation(ml_lat, ml_lng)
        
        return {
            "success": True,
            "building_id": request.file_id,
            "coordinates": {
                "latitude": ml_lat,
                "longitude": ml_lng
            },
            "address": address,
            "confidence": ml_confidence,
            "method": method,
            "note": note,
            "meta": {
                "timezone": timezone_info.get("timezoneId"),
                "elevation": elevation
            }
        }
        
    except HTTPException as he:
        raise he
    except Exception as e:
        raise HTTPException(500, f"Building geocoding error: {str(e)}")


@app.post("/api/geocode-buildings")
async def geocode_buildings(buildings_request: List[BuildingGeocodingRequest]):
    """
    –ü–∞–∫–µ—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–¥–∞–Ω–∏–π
    """
    results = []
    for request in buildings_request:
        try:
            result = await geocode_building(request)
            results.append(result)
        except HTTPException as he:
             results.append({
                "success": False,
                "building_file_id": request.file_id,
                "error": he.detail
            })
        except Exception as e:
            results.append({
                "success": False,
                "building_file_id": request.file_id,
                "error": str(e)
            })
    
    return {
        "success": True,
        "buildings": results,
        "processed": len(results),
        "successful": len([r for r in results if r.get("success")])
    }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8004)