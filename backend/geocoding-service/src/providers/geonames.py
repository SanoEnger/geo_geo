import httpx
from typing import Dict, List, Optional

class GeoNamesProvider:
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ 'demo' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞
    def __init__(self, username: str = "demo", client: Optional[httpx.AsyncClient] = None):
        self.base_url = "http://api.geonames.org"
        
        # üéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º 'demo', –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Å—Ç–æ
        self.username = username if username else "demo" 
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        self.client = client if client else httpx.AsyncClient()
    
    async def get_elevation(self, lat: float, lng: float) -> Optional[float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –Ω–∞–¥ —É—Ä–æ–≤–Ω–µ–º –º–æ—Ä—è"""
        try:
            params = {
                "lat": lat,
                "lng": lng,
                "username": self.username
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
            response = await self.client.get(
                f"{self.base_url}/srtm3JSON", 
                params=params, 
                timeout=10
            )
            response.raise_for_status()
            
            data = response.json()
            elevation = data.get("srtm3")
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ None –∏ —Å—Ç—Ä–æ–∫–∏ "null"
            if isinstance(elevation, (int, float)):
                return float(elevation)
            elif isinstance(elevation, str) and elevation.lower() not in ["null", ""]:
                return float(elevation)
            return None
        except Exception:
            return None
    
    async def get_timezone(self, lat: float, lng: float) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
        params = {
            "lat": lat,
            "lng": lng,
            "username": self.username
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        response = await self.client.get(
            f"{self.base_url}/timezoneJSON", 
            params=params, 
            timeout=10
        )
        response.raise_for_status()
        
        return response.json()
    
    async def search_places(self, query: str, country: str = "", max_rows: int = 10) -> Dict:
        """–ü–æ–∏—Å–∫ –º–µ—Å—Ç"""
        params = {
            "q": query,
            "maxRows": max_rows,
            "username": self.username,
            "style": "FULL"
        }
        
        if country:
            params["country"] = country.upper()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        response = await self.client.get(
            f"{self.base_url}/searchJSON", 
            params=params, 
            timeout=10
        )
        response.raise_for_status()
        
        return response.json()
    
    async def get_country_info(self, country_code: str) -> Dict:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ"""
        params = {
            "country": country_code.upper(),
            "username": self.username
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
        response = await self.client.get(
            f"{self.base_url}/countryInfoJSON", 
            params=params, 
            timeout=10
        )
        response.raise_for_status()
        
        return response.json()