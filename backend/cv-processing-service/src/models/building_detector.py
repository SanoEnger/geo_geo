import cv2
import numpy as np
from ultralytics import YOLO
from PIL import Image, ExifTags
import json
from typing import List, Dict, Optional
import os

class BuildingDetector:
    def __init__(self, model_path: str = 'yolov8n.pt'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YOLO –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∑–¥–∞–Ω–∏–π"""
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ YOLO –º–æ–¥–µ–ª–∏...")
        self.model = YOLO(model_path)
        print(f"‚úÖ –ú–æ–¥–µ–ª—å {model_path} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ö–ª–∞—Å—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–¥–∞–Ω–∏–π
        self.building_classes = ['building', 'house', 'skyscraper', 'bridge']

    def extract_metadata(self, image_path: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            with Image.open(image_path) as img:
                metadata = {
                    'format': img.format,
                    'size': img.size,
                    'mode': img.mode,
                    'filename': os.path.basename(image_path),
                    'file_size': os.path.getsize(image_path)
                }
                
                # EXIF –¥–∞–Ω–Ω—ã–µ
                exif_data = {}
                if hasattr(img, '_getexif') and img._getexif():
                    for tag_id, value in img._getexif().items():
                        tag = ExifTags.TAGS.get(tag_id, tag_id)
                        exif_data[tag] = value
                    
                    # GPS –¥–∞–Ω–Ω—ã–µ
                    gps_info = self._extract_gps_info(exif_data)
                    if gps_info:
                        metadata['gps'] = gps_info
                
                metadata['exif'] = exif_data
                return metadata
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}

    def _extract_gps_info(self, exif_data: Dict) -> Optional[Dict]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ GPS –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ EXIF –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if 'GPSInfo' not in exif_data:
                return None
                
            gps_info = {}
            gps_data = exif_data['GPSInfo']
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            def convert_to_degrees(value):
                """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ –≥—Ä–∞–¥—É—Å—ã"""
                d, m, s = value
                return d + (m / 60.0) + (s / 3600.0)
            
            # –®–∏—Ä–æ—Ç–∞
            if 2 in gps_data and 1 in gps_data:
                lat_ref = gps_data[1]
                lat = convert_to_degrees(gps_data[2])
                if lat_ref == 'S':
                    lat = -lat
                gps_info['latitude'] = lat
            
            # –î–æ–ª–≥–æ—Ç–∞
            if 4 in gps_data and 3 in gps_data:
                lon_ref = gps_data[3]
                lon = convert_to_degrees(gps_data[4])
                if lon_ref == 'W':
                    lon = -lon
                gps_info['longitude'] = lon
            
            # –í—ã—Å–æ—Ç–∞
            if 6 in gps_data:
                gps_info['altitude'] = gps_data[6]
                
            return gps_info
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è GPS: {e}")
            return None

    def detect_buildings(self, image_path: str) -> List[Dict]:
        """–î–µ—Ç–µ–∫—Ü–∏—è –∑–¥–∞–Ω–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(image_path):
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            
            # –î–µ—Ç–µ–∫—Ü–∏—è —Å –ø–æ–º–æ—â—å—é YOLO
            results = self.model(image_path, conf=0.5)
            
            buildings = []
            for result in results:
                for box in result.boxes:
                    class_id = int(box.cls[0])
                    class_name = self.model.names[class_id]
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–¥–∞–Ω–∏—è
                    if class_name in self.building_classes:
                        confidence = float(box.conf[0])
                        bbox = box.xyxy[0].tolist()
                        
                        buildings.append({
                            'class': class_name,
                            'confidence': round(confidence, 3),
                            'bbox': [round(coord, 2) for coord in bbox],  # [x1, y1, x2, y2]
                            'center': self._get_center(bbox),
                            'area': self._calculate_area(bbox, result.orig_shape)
                        })
            
            print(f"üè¢ –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings)}")
            return buildings
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            return []

    def _get_center(self, bbox: List[float]) -> List[float]:
        """–í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—Ç—Ä bounding box"""
        x1, y1, x2, y2 = bbox
        return [round((x1 + x2) / 2, 2), round((y1 + y2) / 2, 2)]

    def _calculate_area(self, bbox: List[float], image_shape: tuple) -> float:
        """–í—ã—á–∏—Å–ª—è–µ–º –ø–ª–æ—â–∞–¥—å bounding box –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        x1, y1, x2, y2 = bbox
        img_height, img_width = image_shape
        area = (x2 - x1) * (y2 - y1) / (img_width * img_height)
        return round(area * 100, 2)  # –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö

    def process_image(self, image_path: str, output_dir: str = None) -> Dict:
        """–ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = self.extract_metadata(image_path)
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –∑–¥–∞–Ω–∏–π
        buildings = self.detect_buildings(image_path)
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≤—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è)
        processed_image_path = None
        if output_dir and buildings:
            processed_image_path = self.visualize_detection(image_path, output_dir, buildings)
        
        return {
            'metadata': metadata,
            'buildings_detected': len(buildings),
            'buildings': buildings,
            'processed_image_path': processed_image_path
        }

    def visualize_detection(self, image_path: str, output_dir: str, buildings: List[Dict]) -> str:
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        try:
            image = cv2.imread(image_path)
            
            for building in buildings:
                x1, y1, x2, y2 = map(int, building['bbox'])
                confidence = building['confidence']
                class_name = building['class']
                
                # –†–∏—Å—É–µ–º bounding box
                color = (0, 255, 0)  # –ó–µ–ª–µ–Ω—ã–π
                cv2.rectangle(image, (x1, y1), (x2, y2), color, 2)
                
                # –ü–æ–¥–ø–∏—Å—å
                label = f"{class_name} {confidence:.2f}"
                cv2.putText(image, label, (x1, y1-10), 
                           cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            filename = os.path.basename(image_path)
            output_path = os.path.join(output_dir, f"detected_{filename}")
            cv2.imwrite(output_path, image)
            print(f"üì∏ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")
            
            return output_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return None