from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import os
import uuid
from PIL import Image
import json

app = FastAPI(
    title="CV Processing Service",
    description="–°–µ—Ä–≤–∏—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–¥–∞–Ω–∏–π –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
UPLOAD_DIR = "storage/uploaded_photos/raw"
PROCESSED_DIR = "storage/uploaded_photos/processed"

os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(PROCESSED_DIR, exist_ok=True)

# –ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞ (–±–µ–∑ YOLO –ø–æ–∫–∞)
class SimpleDetector:
    def __init__(self):
        print("üîÑ –ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_metadata(self, image_path: str):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        try:
            with Image.open(image_path) as img:
                return {
                    'format': img.format,
                    'size': img.size,
                    'mode': img.mode,
                    'filename': os.path.basename(image_path),
                    'file_size': os.path.getsize(image_path)
                }
        except Exception as e:
            return {'error': str(e)}
    
    def mock_detect_buildings(self, image_path: str):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–¥–∞–Ω–∏–π"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç YOLO
        return [
            {
                'class': 'building',
                'confidence': 0.85,
                'bbox': [100, 100, 300, 300],
                'center': [200, 200],
                'area': 15.5
            }
        ]

detector = SimpleDetector()

@app.get("/")
async def root():
    return {
        "message": "CV Processing Service —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "status": "success",
        "mode": "simple_detector",
        "endpoints": [
            "/health",
            "/process-image",
            "/model-info"
        ]
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "cv-processing"}

@app.post("/process-image")
async def process_image(file: UploadFile = File(...)):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('image/'):
            raise HTTPException(400, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        file_id = str(uuid.uuid4())
        file_extension = os.path.splitext(file.filename)[1] or '.jpg'
        file_path = os.path.join(UPLOAD_DIR, f"{file_id}{file_extension}")
        
        with open(file_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            with Image.open(file_path) as img:
                img.verify()
        except Exception as e:
            os.remove(file_path)
            raise HTTPException(400, f"–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file.filename}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = detector.extract_metadata(file_path)
        
        # –ú–æ–∫–æ–≤–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è
        buildings = detector.mock_detect_buildings(file_path)
        
        result = {
            'metadata': metadata,
            'buildings_detected': len(buildings),
            'buildings': buildings,
            'file_info': {
                'original_filename': file.filename,
                'file_id': file_id
            }
        }
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {result['buildings_detected']}")
        
        return {
            "success": True,
            "results": result
        }
        
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

@app.get("/model-info")
async def model_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
    return {
        "model_name": "Simple Detector (Mock)",
        "status": "YOLO will be integrated in next step",
        "input_size": "variable",
        "framework": "Pillow"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8002)