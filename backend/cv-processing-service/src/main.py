from fastapi import FastAPI, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os
import json
from typing import Optional, Dict, List, Any
from PIL import Image
from PIL.ExifTags import TAGS
import traceback

# 1. –ú–æ–¥–µ–ª—å –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å JSON, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Photo Upload Service)
class ProcessRequest(BaseModel):
    file_id: str
    original_filename: str
    file_path: str # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ –æ–±—â–µ–º —Ç–æ–º–µ

app = FastAPI(
    title="CV Processing Service",
    description="–°–µ—Ä–≤–∏—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–¥–∞–Ω–∏–π –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–æ–ª–∂–Ω—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å docker-compose.yml)
UPLOAD_DIR = os.getenv("UPLOAD_DIR", "storage/uploaded_photos/raw")
PROCESSED_DIR = os.getenv("PROCESSED_DIR", "storage/uploaded_photos/processed")

os.makedirs(UPLOAD_DIR, exist_ok=True)
os.makedirs(PROCESSED_DIR, exist_ok=True)

# --------------------------------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã (SimpleDetector)
# --------------------------------------------------------------------------------------------------

class SimpleDetector:
    def __init__(self):
        print("üîÑ –ü—Ä–æ—Å—Ç–æ–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def extract_metadata(self, image_path: str) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
        try:
            with Image.open(image_path) as img:
                file_size = os.path.getsize(image_path) 
                return {
                    'format': img.format,
                    'size': img.size,
                    'mode': img.mode,
                    'filename': os.path.basename(image_path),
                    'file_size': file_size,
                    'exif': self._get_exif_data(img)
                }
        except Exception as e:
            return {'error': str(e)}

    def _get_exif_data(self, img: Image.Image) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ EXIF –¥–∞–Ω–Ω—ã—Ö"""
        exif_data = {}
        try:
            # üåü –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ getexif()
            exif = img.getexif() 
            if exif:
                for tag, value in exif.items():
                    decoded = TAGS.get(tag, tag)
                    exif_data[decoded] = str(value)
        except Exception:
            pass
        return exif_data
    
    def mock_detect_buildings(self, file_path: str) -> List[Dict]:
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–¥–∞–Ω–∏–π"""
        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–¥–∏–Ω —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π BBOX, –∫–∞–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞
        return [
            {
                'class': 'building',
                'confidence': 0.85,
                # BBOX: [x_min, y_min, x_max, y_max]
                'bbox': [500, 500, 1500, 1500], 
                'center': [1000, 1000],
                'area': 1000000
            }
        ]

detector = SimpleDetector()

# --------------------------------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
# --------------------------------------------------------------------------------------------------

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "cv-processing-service"}

@app.post("/api/process") 
async def process_photo(request: ProcessRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: –∏–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é –∑–¥–∞–Ω–∏–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç file_path –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –Ω–∞ –æ–±—â–µ–º —Ç–æ–º–µ.
    """
    file_path = request.file_path
    file_id = request.file_id
    original_filename_safe = request.original_filename

    if not os.path.exists(file_path):
        raise HTTPException(
            status.HTTP_404_NOT_FOUND, 
            f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –æ–±—â–µ–º —Ç–æ–º–µ: {file_path}"
        )

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        try:
            with Image.open(file_path) as img:
                img.verify() 
        except Exception as e:
            raise HTTPException(status.HTTP_400_BAD_REQUEST, f"–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        
        print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {original_filename_safe} ({file_id})")
        
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = detector.extract_metadata(file_path)
        
        # 2. –ú–æ–∫–æ–≤–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è
        buildings = detector.mock_detect_buildings(file_path)
        
        result = {
            'metadata': metadata,
            'buildings_detected': len(buildings),
            'buildings': buildings,
            'file_info': {
                'original_filename': original_filename_safe,
                'file_id': file_id
            }
        }
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {result['buildings_detected']}")
        
        return {
            "success": True,
            "results": result 
        }
        
    except HTTPException as he:
        raise he
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ CV Service: {traceback.format_exc()}")
        raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")

@app.get("/model-info")
async def model_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
    return {
        "model_name": "Simple Detector (Mock)",
        "status": "Ready",
        "description": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–∫–æ–≤–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞."
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8002)