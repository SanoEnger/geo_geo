from fastapi import FastAPI, UploadFile, File, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import os
import httpx
import uuid
from PIL import Image

app = FastAPI(
    title="Photo Upload Service",
    description="–°–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
UPLOAD_DIR = "storage/uploaded_photos/raw"
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png'}
MAX_FILE_SIZE = 50 * 1024 * 1024  # 50MB

os.makedirs(UPLOAD_DIR, exist_ok=True)

@app.get("/")
async def root():
    return {"message": "Photo Upload Service —Ä–∞–±–æ—Ç–∞–µ—Ç!", "status": "success"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "photo-upload"}

def validate_image(file: UploadFile) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    file_extension = os.path.splitext(file.filename)[1].lower()
    if file_extension not in ALLOWED_EXTENSIONS:
        return False, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞"
    
    return True, "–§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω"

@app.post("/api/upload")
async def upload_photo(file: UploadFile = File(...)):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    print(f"üö® UPLOAD SERVICE: –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ {file.filename}")
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        is_valid, message = validate_image(file)
        if not is_valid:
            print(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {message}")
            raise HTTPException(400, message)
        
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        file_id = str(uuid.uuid4())
        file_extension = os.path.splitext(file.filename)[1].lower()
        filename = f"{file_id}{file_extension}"
        file_path = os.path.join(UPLOAD_DIR, filename)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        content = await file.read()
        file_size = len(content)
        print(f"üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        if file_size > MAX_FILE_SIZE:
            raise HTTPException(400, "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        with open(file_path, "wb") as f:
            f.write(content)
        print(f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ PIL
        try:
            print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ PIL...")
            with Image.open(file_path) as img:
                img.verify()
            print(f"‚úÖ PIL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ PIL –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            os.remove(file_path)
            raise HTTPException(400, f"–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {e}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        with Image.open(file_path) as img:
            metadata = {
                "format": img.format,
                "size": img.size,
                "mode": img.mode
            }
        print(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata}")

        # ‚úÖ –í–´–ó–û–í CV SERVICE –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
        print(f"üîó –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ CV Service –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...")
        cv_results = {}
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ø–∞–º—è—Ç–∏
                files = {"file": (file.filename, content, file.content_type)}
                
                cv_response = await client.post(
                    "http://cv-processing-service:8002/process-image",
                    files=files,
                    timeout=30.0
                )
                
                print(f"üìä CV Response —Å—Ç–∞—Ç—É—Å: {cv_response.status_code}")
                
                if cv_response.status_code == 200:
                    cv_data = cv_response.json()
                    print(f"‚úÖ CV Service –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ: {cv_data}")
                    
                    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã CV Service
                    if cv_data.get("success"):
                        # CV Service –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–æ–ª–µ "results"
                        results_data = cv_data.get("results", {})
                        cv_results = {
                            "status": "success",
                            "buildings_detected": results_data.get("buildings_detected", 0),
                            "buildings": results_data.get("buildings", []),
                            "metadata": results_data.get("metadata", {}),
                            "file_info": results_data.get("file_info", {})
                        }
                        print(f"üè† –ù–∞–π–¥–µ–Ω–æ –∑–¥–∞–Ω–∏–π: {cv_results['buildings_detected']}")
                    else:
                        print(f"‚ö†Ô∏è CV Service –≤–µ—Ä–Ω—É–ª success: false")
                        cv_results = {
                            "status": "error", 
                            "message": "CV processing failed",
                            "cv_response": cv_data
                        }
                else:
                    print(f"‚ùå CV Error: {cv_response.status_code} - {cv_response.text}")
                    cv_results = {
                        "status": "error",
                        "message": f"CV processing failed with status {cv_response.status_code}",
                        "details": cv_response.text
                    }
                    
        except httpx.ConnectError as e:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ CV Service: {e}"
            print(f"‚ùå {error_msg}")
            cv_results = {"status": "error", "message": error_msg}
        except httpx.TimeoutException as e:
            error_msg = f"–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ CV Service: {e}"
            print(f"‚è∞ {error_msg}")
            cv_results = {"status": "error", "message": error_msg}
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å CV Service: {e}"
            print(f"‚ùå {error_msg}")
            cv_results = {"status": "error", "message": error_msg}

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_data = {
            "success": True,
            "file_id": file_id,
            "filename": filename,
            "original_name": file.filename,
            "file_size": file_size,
            "metadata": metadata,
            "cv_results": cv_results,
            "message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
        }

        print(f"‚úÖ UPLOAD SERVICE: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return response_data
        
    except HTTPException as he:
        print(f"üö´ HTTP Exception: {he.detail}")
        raise he
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        import traceback
        print(f"üîç Traceback: {traceback.format_exc()}")
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

@app.post("/api/upload/batch")
async def upload_batch_photos(files: list[UploadFile] = File(...)):
    """–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ"""
    results = []
    
    for file in files:
        try:
            result = await upload_photo(file)
            results.append({
                "filename": file.filename,
                "status": "success",
                "data": result
            })
        except Exception as e:
            results.append({
                "filename": file.filename,
                "status": "error",
                "error": str(e)
            })
    
    return {
        "processed": len(results),
        "results": results
    }

@app.get("/api/files")
async def list_uploaded_files():
    """–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        files = []
        for filename in os.listdir(UPLOAD_DIR):
            file_path = os.path.join(UPLOAD_DIR, filename)
            if os.path.isfile(file_path):
                files.append({
                    "filename": filename,
                    "size": os.path.getsize(file_path),
                    "modified": os.path.getmtime(file_path)
                })
        
        return {"files": files}
    except Exception as e:
        raise HTTPException(500, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")