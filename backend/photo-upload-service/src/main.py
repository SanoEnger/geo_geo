from fastapi import FastAPI, UploadFile, File, HTTPException, status
from fastapi.middleware.cors import CORSMiddleware
import os
import httpx
import uuid
import io
from PIL import Image
from pydantic import BaseModel
from typing import List, Dict, Optional
from datetime import datetime
import traceback 

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Geocoding Service (–Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JSON-–∑–∞–ø—Ä–æ—Å–∞)
class BuildingGeocodingRequest(BaseModel):
    file_id: str
    building_bbox: Optional[List[float]] = None

app = FastAPI(
    title="Photo Upload Service",
    description="–°–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
UPLOAD_DIR = os.getenv("UPLOAD_DIR", "storage/uploaded_photos/raw")
ALLOWED_EXTENSIONS = {'.jpg', '.jpeg', '.png'}
MAX_FILE_SIZE = int(os.getenv("MAX_FILE_SIZE", 50 * 1024 * 1024))

# –ê–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
GEOCODING_SERVICE_URL = os.getenv("GEOCODING_SERVICE_URL", "http://geocoding-service:8004")
CV_PROCESSING_SERVICE_URL = os.getenv("CV_PROCESSING_SERVICE_URL", "http://cv-processing-service:8002")

os.makedirs(UPLOAD_DIR, exist_ok=True)

# --------------------------------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------------------------------------------------------------------------------------

async def call_cv_processing_service(file_id: str, original_filename: str, file_path: str) -> List[Dict]:
    """–í—ã–∑–æ–≤ CV Processing Service –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∑–¥–∞–Ω–∏–π."""
    print(f"üîÑ CV-Processing: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É {file_id}")
    
    try:
        async with httpx.AsyncClient(timeout=60.0) as client:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ CV Service –ø—Ä–∏–Ω–∏–º–∞–µ—Ç JSON —Å file_id –∏ file_path
            response = await client.post(
                f"{CV_PROCESSING_SERVICE_URL}/api/process",
                json={
                    "file_id": file_id,
                    "original_filename": original_filename,
                    "file_path": file_path # –°–µ—Ä–≤–∏—Å—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–±—â–∏–π —Ç–æ–º 'storage'
                },
            )
            response.raise_for_status()
            
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ CV Service –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"results": {"buildings": [...]}}
            cv_result = response.json().get("results", {}).get("buildings", [])
            print(f"‚úÖ CV-Processing: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(cv_result)} –∑–¥–∞–Ω–∏–π.")
            return cv_result
            
    except httpx.HTTPStatusError as e:
        print(f"‚ùå CV Service HTTP Error: {e.response.text}")
        raise HTTPException(e.response.status_code, detail=f"CV Service Error: {e.response.json().get('detail', e.response.text)}")
    except Exception as e:
        print(f"‚ùå CV Service Connection Error: {e}")
        raise HTTPException(status.HTTP_503_SERVICE_UNAVAILABLE, detail=f"CV Service Unavailable: {str(e)}")


async def call_geocoding_service(request_data: BuildingGeocodingRequest) -> Dict:
    """–í—ã–∑–æ–≤ Geocoding Service –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç."""
    bbox_log = f"[{request_data.building_bbox[0]}, ...]" if request_data.building_bbox else "–Ω–µ—Ç BBOX"
    print(f"üîÑ Geocoding: –û—Ç–ø—Ä–∞–≤–∫–∞ BBOX ({bbox_log}) –¥–ª—è {request_data.file_id}")
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                f"{GEOCODING_SERVICE_URL}/api/geocode-building",
                json=request_data.model_dump(),
            )
            response.raise_for_status()
            
            print(f"‚úÖ Geocoding: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.json().get('address', '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã')}")
            return response.json()
            
    except httpx.HTTPStatusError as e:
        print(f"‚ùå Geocoding Service HTTP Error: {e.response.text}")
        raise HTTPException(e.response.status_code, detail=f"Geocoding Service Error: {e.response.json().get('detail', e.response.text)}")
    except Exception as e:
        print(f"‚ùå Geocoding Service Connection Error: {e}")
        raise HTTPException(status.HTTP_503_SERVICE_UNAVAILABLE, detail=f"Geocoding Service Unavailable: {str(e)}")

async def upload_photo(file: UploadFile) -> Dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
    if file.filename is None:
        raise HTTPException(status.HTTP_400_BAD_REQUEST, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞.")
        
    file_extension = os.path.splitext(file.filename)[1].lower()
    if file_extension not in ALLOWED_EXTENSIONS:
        raise HTTPException(status.HTTP_400_BAD_REQUEST, f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_extension}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(ALLOWED_EXTENSIONS)}")

    # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    file_id = str(uuid.uuid4())
    original_filename_safe = file.filename.replace('/', '_').replace('\\', '_')
    storage_filename = f"{file_id}_{original_filename_safe}"
    file_path = os.path.join(UPLOAD_DIR, storage_filename)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {file.filename} –∫–∞–∫ {storage_filename}")
    file_size = 0
    
    try:
        # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ UploadFile
        # –ö–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: —Ñ–∞–π–ª —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—á–∏—Ç–∞–Ω –≤ API Gateway, –Ω–æ httpx –ø–µ—Ä–µ–¥–∞–µ—Ç –µ–≥–æ –≤ memory.
        # file.read() —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –∏ —á–∏—Ç–∞–µ—Ç.
        contents = await file.read()
        file_size = len(contents)
        
        if file_size > MAX_FILE_SIZE:
            raise HTTPException(status.HTTP_413_REQUEST_ENTITY_TOO_LARGE, f"–§–∞–π–ª {file.filename} ({file_size} bytes) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä {MAX_FILE_SIZE} bytes.")
            
        with open(file_path, "wb") as f:
            f.write(contents)
            
        print(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –†–∞–∑–º–µ—Ä: {file_size} bytes")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        # –û—á–∏—Å—Ç–∫–∞, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
        if os.path.exists(file_path):
            os.remove(file_path)
        raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}")

    # 1. –í—ã–∑–æ–≤ CV Processing Service
    cv_buildings = await call_cv_processing_service(file_id, original_filename_safe, file_path)
    
    geocoding_result = {"success": False, "note": "–ó–¥–∞–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã."}
    
    # 2. –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∑–¥–∞–Ω–∏—è)
    if cv_buildings:
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π BBOX –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        first_building = cv_buildings[0]
        bbox = first_building.get('bbox')
        
        if bbox and len(bbox) == 4 and all(isinstance(x, (int, float)) for x in bbox):
            print(f"üîÑ Geocoding: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ 1 –∑–¥–∞–Ω–∏–π. BBOX –ø–µ—Ä–≤–æ–≥–æ: {bbox}")
            
            geocoding_request = BuildingGeocodingRequest(
                file_id=storage_filename, 
                building_bbox=bbox
            )
            
            geocoding_result = await call_geocoding_service(geocoding_request)
        else:
            geocoding_result = {"success": False, "note": "–ó–¥–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã, –Ω–æ BBOX –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."}

    # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    return {
        "file_id": file_id,
        "filename": original_filename_safe,
        "size": file_size,
        "status": "processed",
        "geocoding_result": geocoding_result
    }

# --------------------------------------------------------------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
# --------------------------------------------------------------------------------------------------

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "photo-upload-service"}

# üåü –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï üåü
@app.post("/api/upload")
async def upload_files(files: List[UploadFile] = File(...)): # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–ª–µ 'files'
    """–ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    
    if not files:
        raise HTTPException(status.HTTP_400_BAD_REQUEST, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.")
        
    results = []
    
    # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–∫–µ—Ç–µ
    for file in files:
        try:
            # –í–∞–∂–Ω–æ: –°–±—Ä–æ—Å–∏—Ç—å –∫—É—Ä—Å–æ—Ä –≤ 0, —á—Ç–æ–±—ã upload_photo –º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            await file.seek(0) 

            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–µ–π –æ–¥–∏–Ω —Ñ–∞–π–ª
            result = await upload_photo(file)
            results.append({
                "filename": file.filename,
                "status": "success",
                "data": result
            })
        except HTTPException as he:
             results.append({
                "filename": file.filename,
                "status": "error",
                "error": he.detail
            })
        except Exception as e:
            # –î–ª—è —Ü–µ–ª–µ–π –æ—Ç–ª–∞–¥–∫–∏
            print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file.filename}: {traceback.format_exc()}")
            results.append({
                "filename": file.filename,
                "status": "error",
                "error": f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            })
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –±–∞—Ç—á–∞
    return {
        "processed": len(results),
        "results": results
    }

@app.get("/api/files")
async def list_uploaded_files():
    """–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    try:
        files = []
        for filename in os.listdir(UPLOAD_DIR):
            file_path = os.path.join(UPLOAD_DIR, filename)
            if os.path.isfile(file_path):
                files.append({
                    "filename": filename,
                    "size": os.path.getsize(file_path),
                    "modified": os.path.getmtime(file_path)
                })
        return files
    except Exception as e:
        raise HTTPException(status.HTTP_500_INTERNAL_SERVER_ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8003)