services:
  # PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  postgres:
    image: postgres:13
    container_name: geo_photo_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./databases/postgres:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
  redis:
    image: redis:7-alpine
    container_name: geo_photo_redis
    ports:
      - "6379:6379"
    volumes:
      - ./databases/redis:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: geo_photo_api_gateway
    ports:
      - "8000:8000"
    volumes:
      - ./backend/api-gateway:/app
      - ./storage:/app/storage
    environment:
      - PYTHONPATH=/app/src
      - DEBUG=${DEBUG}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8000/health', timeout=2)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  auth-service:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
    container_name: geo_photo_auth_service
    ports:
      - "8001:8001"
    volumes:
      - ./backend/auth-service:/app
    environment:
      - PYTHONPATH=/app/src
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8001/health', timeout=2)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # –°–µ—Ä–≤–∏—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è (YOLO)
  cv-processing-service:
    build:
      context: ./backend/cv-processing-service
      dockerfile: Dockerfile
    container_name: geo_photo_cv_service
    ports:
      - "8002:8002"
    volumes:
      - ./backend/cv-processing-service:/app
      - ./storage:/app/storage
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app/src
      - DEBUG=${DEBUG}
      - YOLO_MODEL_PATH=${YOLO_MODEL_PATH}
      - UPLOAD_DIR=${UPLOAD_DIR}
      - PROCESSED_DIR=${PROCESSED_DIR}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8002/health', timeout=2)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # –°–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
  photo-upload-service:
    build:
      context: ./backend/photo-upload-service
      dockerfile: Dockerfile
    container_name: geo_photo_upload_service
    ports:
      - "8003:8003"
    volumes:
      - ./backend/photo-upload-service:/app
      - ./storage:/app/storage
    environment:
      - PYTHONPATH=/app/src
      - DEBUG=${DEBUG}
      - UPLOAD_DIR=${UPLOAD_DIR}
      - MAX_FILE_SIZE=52428800
      - CV_PROCESSING_SERVICE_URL=http://cv-processing-service:8002
      - GEOCODING_SERVICE_URL=http://geocoding-service:8004
    depends_on:
      postgres:
        condition: service_healthy
      geocoding-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8003/health', timeout=2)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # –°–µ—Ä–≤–∏—Å –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (OpenStreetMap + GeoNames)
  geocoding-service:
    build:
      context: ./backend/geocoding-service
      dockerfile: Dockerfile
    container_name: geo_photo_geocoding_service
    ports:
      - "8004:8004"
    volumes:
      - ./backend/geocoding-service:/app
      - ./storage:/app/storage
      - ./data:/app/data
    environment:
      - PYTHONPATH=/app/src
      - DEBUG=${DEBUG}
      - GEONAMES_USERNAME=${GEONAMES_USERNAME}
      - OSM_NOMINATIM_URL=https://nominatim.openstreetmap.org
      - GEONAMES_URL=http://api.geonames.org
      - ML_MODEL_PATH=${ML_MODEL_PATH}
    # üåü –ö–†–ò–¢–ò–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ö–ê–ó–´–í–ê–ï–ú –ü–£–ë–õ–ò–ß–ù–´–ï DNS-–°–ï–†–í–ï–†–´
    dns:
      - 8.8.8.8  # Google Public DNS
      - 1.1.1.1  # Cloudflare DNS
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8004/health', timeout=2)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  export-service:
    build:
      context: ./backend/export-service
      dockerfile: Dockerfile
    container_name: geo_photo_export_service
    ports:
      - "8005:8005"
    volumes:
      - ./backend/export-service:/app
      - ./storage:/app/storage
    environment:
      - PYTHONPATH=/app/src
      - DEBUG=${DEBUG}
      - EXPORT_DIR=/app/storage/exports
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º service_healthy –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    depends_on:
      postgres:
        condition: service_healthy 
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8005/health', timeout=2)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend (Vue.js)
  frontend:
    build: ./frontend
    ports:
      - "3000:80"
    depends_on:
      - api-gateway
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx –¥–ª—è production (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  nginx-proxy:
    image: nginx:alpine
    container_name: geo_photo_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - frontend
      - api-gateway
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: geo_photo_network
    driver: bridge
