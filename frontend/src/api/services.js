import apiClient from './client'

export const photoService = {
  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
  async uploadPhoto(file) {
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await apiClient.post('/photo_upload/upload', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    });
    
    const apiData = response.data;
    
    console.log('üìä API Response structure:', apiData.cv_results);
    
    if (apiData.cv_results && apiData.cv_results.status === 'success') {
      // –£—Å–ø–µ—à–Ω–∞—è CV –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –¢–ï–ü–ï–†–¨ –î–û–ë–ê–í–õ–Ø–ï–ú –ì–ï–û–ö–û–î–ò–†–û–í–ê–ù–ò–ï
      let buildingsWithGeocoding = apiData.cv_results.buildings;
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–¥–∞–Ω–∏—è - –ø—ã—Ç–∞–µ–º—Å—è –∏—Ö –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
      if (buildingsWithGeocoding && buildingsWithGeocoding.length > 0) {
        try {
          const geocodingResult = await this.geocodeDetectedBuildings(
            apiData.file_id, 
            buildingsWithGeocoding
          );
          buildingsWithGeocoding = geocodingResult.buildings;
        } catch (error) {
          console.warn('Geocoding failed, using buildings without coordinates:', error);
        }
      }
      
      // –ë–µ—Ä–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –∑–¥–∞–Ω–∏—è –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const firstBuilding = buildingsWithGeocoding[0];
      
      return {
        success: true,
        data: {
          file_id: apiData.file_id,
          original_filename: apiData.original_name,
          status: 'completed',
          buildings_detected: apiData.cv_results.buildings_detected,
          buildings: buildingsWithGeocoding, // ‚Üê –∑–¥–∞–Ω–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏!
          coordinates: firstBuilding?.coordinates || null,
          address: firstBuilding?.address || null,
          full_response: apiData
        }
      };
    } else if (apiData.cv_results && apiData.cv_results.status === 'error') {
      // –û—à–∏–±–∫–∞ CV –æ–±—Ä–∞–±–æ—Ç–∫–∏
      return {
        success: false,
        error: 'CV processing failed',
        data: {
          file_id: apiData.file_id,
          original_filename: apiData.original_name,
          status: 'failed',
          buildings_detected: 0,
          error: 'CV processing failed'
        }
      };
    } else {
      return {
        success: false,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞',
        data: apiData
      };
    }
  },

  async geocodeDetectedBuildings(fileId, buildings) {
    try {
      const requests = buildings.map((building, index) => ({
        file_id: `${fileId}_building_${index}`,
        building: {
          bbox: building.bbox,
          center: building.center,
          area: building.area,
          confidence: building.confidence,
          class_name: building.class || "building"
        },
        image_metadata: {
          file_id: fileId,
          building_index: index
        }
      }));

      const response = await apiClient.post('/geocoding/geocode-buildings', requests);
      return response.data;
    } catch (error) {
      console.error('Geocoding error:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–¥–∞–Ω–∏—è –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return {
        buildings: buildings.map(building => ({
          ...building,
          coordinates: null,
          address: null,
          geocoding_error: error.message
        }))
      };
    }
  },

  // –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  async uploadBatch(files) {
    const formData = new FormData()
    files.forEach(file => {
      formData.append('files', file)
    })
    
    const response = await apiClient.post('/photo_upload/upload/batch', formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      },
      timeout: 300000 // 5 –º–∏–Ω—É—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    })
    
    return response.data
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ CV —Å–µ—Ä–≤–∏—Å
  async processPhoto(file) {
    const formData = new FormData();
    formData.append('file', file);
    
    const response = await apiClient.post(`/cv_processing/process-image`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data'
      }
    })
    return response.data
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async getUploadedFiles() {
    const response = await apiClient.get('/photo_upload/files')
    return response.data
  }
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
export const geocodingService = {
  // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
  async geocodeAddress(address) {
    const response = await apiClient.get('/geocoding/geocode', {
      params: { address }
    })
    return response.data
  },

  // –û–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
  async reverseGeocode(lat, lng) {
    const response = await apiClient.get('/geocoding/reverse-geocode', {
      params: { lat, lng }
    })
    return response.data
  },

  async geocodeBuilding(fileId, buildingData) {
    const response = await apiClient.post('/geocoding/geocode-building', {
      file_id: fileId,
      building: buildingData
    })
    return response.data
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã
  async getElevation(lat, lng) {
    const response = await apiClient.get('/geocoding/elevation', {
      params: { lat, lng }
    })
    return response.data
  }
}

// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞—Å–µ—Ç–∞–º–∏
export const datasetService = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤
  async getDatasets() {
    const response = await apiClient.get('/datasets')
    return response.data
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
  async createDataset(name, description) {
    const response = await apiClient.post('/datasets', {
      name,
      description,
      source_type: 'upload'
    })
    return response.data
  }
}

// –°–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authService = {
  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  async login(username, password) {
    const response = await apiClient.post('/auth/login', null, {
      params: { username, password }
    })
    return response.data
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  async getCurrentUser() {
    const response = await apiClient.get('/auth/me')
    return response.data
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  async register(username, email, password) {
    const response = await apiClient.post('/auth/register', null, {
      params: { username, email, password }
    })
    return response.data
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
export const healthService = {
  async checkAllServices() {
    const response = await apiClient.get('/health')
    return response.data
  }
}

