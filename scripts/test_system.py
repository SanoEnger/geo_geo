import requests
import json
import time
import os
from datetime import datetime

def test_system():
    """–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    base_url = "http://localhost:8000"
    results = {
        "timestamp": datetime.now().isoformat(),
        "services": {},
        "overall": "PASS"
    }
    
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã Geo Photo Analyzer...")
    
    # 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
    print("\n1. üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
    try:
        health_response = requests.get(f"{base_url}/health", timeout=10)
        health_data = health_response.json()
        
        for service, status in health_data.get("services", {}).items():
            service_status = status.get("status", "unknown")
            results["services"][service] = service_status
            
            if service_status == "healthy":
                print(f"   ‚úÖ {service}: {service_status}")
            else:
                print(f"   ‚ùå {service}: {service_status}")
                results["overall"] = "FAIL"
                
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        results["overall"] = "FAIL"
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Gateway
    print("\n2. üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API Gateway...")
    try:
        gateway_response = requests.get(f"{base_url}/", timeout=10)
        if gateway_response.status_code == 200:
            print("   ‚úÖ API Gateway —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"   ‚ùå API Gateway: {gateway_response.status_code}")
            results["overall"] = "FAIL"
    except Exception as e:
        print(f"   ‚ùå API Gateway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        results["overall"] = "FAIL"
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("\n3. üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    try:
        auth_response = requests.get(f"{base_url}/api/auth/", timeout=10)
        if auth_response.status_code == 200:
            print("   ‚úÖ Auth Service —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"   ‚ùå Auth Service: {auth_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Auth Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    print("\n4. üì∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ...")
    try:
        upload_response = requests.get(f"{base_url}/api/photo_upload/", timeout=10)
        if upload_response.status_code == 200:
            print("   ‚úÖ Photo Upload Service —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"   ‚ùå Photo Upload Service: {upload_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Photo Upload Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CV –æ–±—Ä–∞–±–æ—Ç–∫–∏
    print("\n5. ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CV Processing Service...")
    try:
        cv_response = requests.get(f"{base_url}/api/cv_processing/", timeout=10)
        if cv_response.status_code == 200:
            print("   ‚úÖ CV Processing Service —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"   ‚ùå CV Processing Service: {cv_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå CV Processing Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\n6. üó∫Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Geocoding Service...")
    try:
        geo_response = requests.get(f"{base_url}/api/geocoding/", timeout=10)
        if geo_response.status_code == 200:
            print("   ‚úÖ Geocoding Service —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            test_geo = requests.get(f"{base_url}/api/geocoding/geocode", 
                                  params={"address": "–ú–æ—Å–∫–≤–∞, –ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å"}, 
                                  timeout=10)
            if test_geo.status_code == 200:
                print("   ‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print(f"   ‚ùå –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_geo.status_code}")
                
        else:
            print(f"   ‚ùå Geocoding Service: {geo_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Geocoding Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    print("\n7. üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Frontend...")
    try:
        frontend_response = requests.get("http://localhost:3000", timeout=10)
        if frontend_response.status_code == 200:
            print("   ‚úÖ Frontend —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"   ‚ùå Frontend: {frontend_response.status_code}")
    except Exception as e:
        print(f"   ‚ùå Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        results["overall"] = "FAIL"
    
    # 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n8. üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    try:
        import psycopg2
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            dbname="geo_photo_db",
            user="admin",
            password="admin123"
        )
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public'")
        table_count = cursor.fetchone()[0]
        print(f"   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, —Ç–∞–±–ª–∏—Ü: {table_count}")
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        results["overall"] = "FAIL"
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {results['overall']}")
    print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(results['services'])}")
    
    healthy_services = [s for s, status in results['services'].items() if status == 'healthy']
    print(f"–†–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤: {len(healthy_services)}")
    
    if results['overall'] == 'PASS':
        print("üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")

if __name__ == "__main__":
    test_system()