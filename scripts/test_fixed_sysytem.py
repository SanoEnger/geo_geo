import requests
import json
from datetime import datetime

def test_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Geo Photo Analyzer...\n")
    
    base_url = "http://localhost:8000"
    results = {}
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API Gateway
    print("1. üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API Gateway...")
    try:
        response = requests.get(f"{base_url}/", timeout=5)
        if response.status_code == 200:
            print("   ‚úÖ API Gateway —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results['api_gateway'] = 'success'
        else:
            print(f"   ‚ùå API Gateway: {response.status_code}")
            results['api_gateway'] = 'failed'
    except Exception as e:
        print(f"   ‚ùå API Gateway: {e}")
        results['api_gateway'] = 'failed'
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Gateway
    print("\n2. üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤ —á–µ—Ä–µ–∑ Gateway...")
    services = ['auth', 'cv_processing', 'photo_upload', 'geocoding']
    
    for service in services:
        try:
            response = requests.get(f"{base_url}/{service}/health", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ {service}: {data.get('status', 'healthy')}")
                results[service] = 'success'
            else:
                print(f"   ‚ùå {service}: {response.status_code}")
                results[service] = 'failed'
        except Exception as e:
            print(f"   ‚ùå {service}: {e}")
            results[service] = 'failed'
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö endpoints
    print("\n3. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö endpoints —Å–µ—Ä–≤–∏—Å–æ–≤...")
    for service in services:
        try:
            response = requests.get(f"{base_url}/{service}/", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ {service}: {data.get('message', '—Ä–∞–±–æ—Ç–∞–µ—Ç')}")
            else:
                print(f"   ‚ö†Ô∏è {service}: {response.status_code}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è {service}: {e}")
    
    # 4. –ò—Ç–æ–≥–∏
    print("\n" + "="*50)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    success_count = sum(1 for result in results.values() if result == 'success')
    total_count = len(results)
    
    print(f"–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {'SUCCESS' if success_count == total_count else 'PARTIAL'}")
    print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {total_count}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö: {success_count}")
    
    if success_count == total_count:
        print("üéâ –í–°–ï –°–ï–†–í–ò–°–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    else:
        print("‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open('test_results_fixed.json', 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': datetime.now().isoformat(),
            'results': results,
            'summary': {
                'total': total_count,
                'success': success_count,
                'status': 'success' if success_count == total_count else 'partial'
            }
        }, f, indent=2, ensure_ascii=False)
    
    print("üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results_fixed.json")

if __name__ == "__main__":
    test_system()